// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Decco from "decco/src/Decco.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";

function photo_encode(v) {
  return Js_dict.fromArray([
              /* tuple */[
                "albumId",
                Decco.intToJson(v.albumId)
              ],
              /* tuple */[
                "id",
                Decco.intToJson(v.id)
              ],
              /* tuple */[
                "title",
                Decco.stringToJson(v.title)
              ],
              /* tuple */[
                "url",
                Decco.stringToJson(v.url)
              ],
              /* tuple */[
                "thumbnailUrl",
                Decco.stringToJson(v.thumbnailUrl)
              ]
            ]);
}

function photo_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number" || match.tag !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  } else {
    var dict = match[0];
    var match$1 = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "albumId"), null));
    if (match$1.tag) {
      var e = match$1[0];
      return /* Error */Block.__(1, [{
                  path: ".albumId" + e.path,
                  message: e.message,
                  value: e.value
                }]);
    } else {
      var match$2 = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "id"), null));
      if (match$2.tag) {
        var e$1 = match$2[0];
        return /* Error */Block.__(1, [{
                    path: ".id" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }]);
      } else {
        var match$3 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "title"), null));
        if (match$3.tag) {
          var e$2 = match$3[0];
          return /* Error */Block.__(1, [{
                      path: ".title" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }]);
        } else {
          var match$4 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "url"), null));
          if (match$4.tag) {
            var e$3 = match$4[0];
            return /* Error */Block.__(1, [{
                        path: ".url" + e$3.path,
                        message: e$3.message,
                        value: e$3.value
                      }]);
          } else {
            var match$5 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "thumbnailUrl"), null));
            if (match$5.tag) {
              var e$4 = match$5[0];
              return /* Error */Block.__(1, [{
                          path: ".thumbnailUrl" + e$4.path,
                          message: e$4.message,
                          value: e$4.value
                        }]);
            } else {
              return /* Ok */Block.__(0, [{
                          albumId: match$1[0],
                          id: match$2[0],
                          title: match$3[0],
                          url: match$4[0],
                          thumbnailUrl: match$5[0]
                        }]);
            }
          }
        }
      }
    }
  }
}

function photos_encode(v) {
  return Decco.listToJson(photo_encode, v);
}

function photos_decode(v) {
  return Decco.listFromJson(photo_decode, v);
}

export {
  photo_encode ,
  photo_decode ,
  photos_encode ,
  photos_decode ,
  
}
/* No side effect */
